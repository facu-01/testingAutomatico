package com.example.testingautomatico;

/*import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;*/

// Generated by Selenium IDE

import java.time.Duration;
import org.junit.jupiter.api.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import java.util.*;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MusimundoTest {
    
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  
  @BeforeAll
  public void setUp() {
    System.setProperty("webdriver.chrome.driver","./bin/chromedriver.exe");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  
  @AfterEach
  public void tearDown() {
    driver.quit();
  }
  
  @Test
  public void musimundoTest() throws InterruptedException {
    // se abre la URL
    driver.get("https://www.musimundo.com/climatizacion/calefactores/calefactor-sin-salida-orbis-4044go/p/00268035?bdwsearch=true");
    
    // se ajusta el tamaño de la ventana
    driver.manage().window().setSize(new Dimension(1054, 808));
    
    // se agrega el producto al carrito de compras
    driver.findElement(By.id("addToCartButton")).click();
    
    // el tiempo de espera es necesario para que desaparezca un elemento que solapa a otros por unos segundos
    Thread.sleep(10000);
    
    // se vuelve a añadir el producto
    driver.findElement(By.id("addToCartButton")).click();
    Thread.sleep(10000);

    
    // se abre el carrito de compras
    driver.findElement(By.cssSelector(".miniCart .icons-sprite")).click();
    
    // precio unitario del producto (elemento)
    WebElement elementoPrecioUnitario = driver.findElement(By.cssSelector(".mus-pro-price-number"));
    // precio unitario del producto (string)
    String stringPrecioUnitario = elementoPrecioUnitario
                                    .getText()
                                        .substring(0, elementoPrecioUnitario.getText().length()-2)
                                            .replace(".", "")
                                                .replace(",", ".");
    // precio unitario del producto (valor numérico)
    Double numeroPrecioUnitario = Double.parseDouble(stringPrecioUnitario);
    
    // subtotal de la compra (elemento)
    WebElement elementoSubtotal = driver.findElement(By.cssSelector(".mus-pro-total"));
    // subtotal de la compra (string)
    String stringSubtotal = elementoSubtotal
                                .getText()
                                    .substring(0, elementoPrecioUnitario.getText().length()-2)
                                        .replace(".", "")
                                            .replace(",", ".");
    // subtotal de la compra (valor numérico)
    Double numeroSubtotal = Double.parseDouble(stringSubtotal);
    
    // visualización de los valores en la consola
    System.out.println("Precio unitario: " + numeroPrecioUnitario);
    System.out.println("Subtotal: " + numeroSubtotal);
    
    // aserción (el subtotal debe ser el doble del precio unitario, ya que se añadió el mismo producto dos veces al carrito)
    assertEquals(numeroSubtotal, numeroPrecioUnitario*2);
    
  }
  
}
